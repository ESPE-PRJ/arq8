version: '3.8'

services:
  # API Gateway - Entry point for all requests
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - user-service
      - product-service
      - order-service
      - notification-service
      - event-store
    networks:
      - cloudmarket-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service - Authentication and user management
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=postgres-user
      - POSTGRES_DB=userdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - REDIS_HOST=redis
      - JWT_SECRET=your-jwt-secret-key-change-in-production
    depends_on:
      - postgres-user
      - redis
    networks:
      - cloudmarket-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Product Service - Product catalog management
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=postgres-product
      - POSTGRES_DB=productdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - REDIS_HOST=redis
    depends_on:
      - postgres-product
      - redis
    networks:
      - cloudmarket-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Order Service - Order processing and management
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=postgres-order
      - POSTGRES_DB=orderdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - REDIS_HOST=redis
    depends_on:
      - postgres-order
      - redis
      - product-service
    networks:
      - cloudmarket-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Notification Service - Asynchronous notifications
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    environment:
      - REDIS_HOST=redis
    depends_on:
      - redis
    networks:
      - cloudmarket-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Event Store Service - Event sourcing implementation
  event-store:
    build:
      context: ./services/event-store
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=postgres-events
      - POSTGRES_DB=eventsdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - REDIS_HOST=redis
    depends_on:
      - postgres-events
      - redis
    networks:
      - cloudmarket-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis - Cache and Message Broker
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - cloudmarket-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - User Database
  postgres-user:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=userdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    networks:
      - cloudmarket-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d userdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - Product Database
  postgres-product:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=productdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-product-data:/var/lib/postgresql/data
    networks:
      - cloudmarket-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d productdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - Order Database
  postgres-order:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=orderdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
    networks:
      - cloudmarket-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d orderdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - Events Database
  postgres-events:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=eventsdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-events-data:/var/lib/postgresql/data
    networks:
      - cloudmarket-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d eventsdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - cloudmarket-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - cloudmarket-network
    restart: unless-stopped

# Networks
networks:
  cloudmarket-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes for data persistence
volumes:
  redis-data:
    driver: local
  postgres-user-data:
    driver: local
  postgres-product-data:
    driver: local
  postgres-order-data:
    driver: local
  postgres-events-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local